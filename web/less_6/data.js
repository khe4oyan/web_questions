const data = {
  books: [
    {n: "You Dont Know JS | Kyle Simpson", l: "https://drive.google.com/file/d/1emfuItjS4EwgrN3PyjjTD8lWAVNJk0Go/view?usp=sharing"}
  ],
  task: [
    "You Dont Know JS | Kyle Simpson (read all)"
  ],
  question: [
    {
      q: "Интерполяция", i: false, 
      a: [
        "Cпособ соединения строк через вставку значений переменных в строку-шаблон с помощью фигурных скобок. Например, `Hi, ${name}!`",
        "",
        "Здесь вместо ${name} вставляется значение из переменной name",
      ]
    },
    {
      q: "Значения в JS", i: false, 
      a: [
        "Наиболее фундаментальной единицей информации в программе является значение.",
        "",
        "Значения содержат данные.",
        "Они используются программами для хранения состояния.",
        "",
        "В JS значения существуют в двух формах: примитивы и объекты. Значения встраиваются в программы в виде литералов",
        "",
        'Пример: greeting("My name is Kyle.");',
      ]
    },
    {
      q: "Файл JS", i: false, 
      a: [
        "В JS каждый автономный файл представляет собой отдельную программу.",
        "Почему это важно?",
        "Главная причина связана с обработкой ошибок. Так как JS рассматривает файлы как программы, в одном файле может произойти ошибка (во время разбора/компиляции или выполнения), но это не обязательно помешает обработке следующего файла.",
        "",
        "Если ваше приложение зависит от пяти файлов . JS и в одном из них произойдет сбой, вероятно, приложение будет работать лишь частично (в лучшем случае).",
        "Важно проследить за тем, чтобы все файлы работали правильно и, насколько это возможно, корректно обрабатывали ошибки в других файлах.",
        "",
        "Возможно, необходимость рассматривать разные файлы .js как отдельные программы вас удивит. С точки зрения использования приложения все выглядит как одна большая программа. Это связано с тем, что выполнение приложения позволяет этим отдельным программам взаимодействовать и работать как единое целое.",
      ]
    },
    {
      q: "Разбор, компиляция и выполнение JS", i: "js_interprete_stages", 
      a: [
        "1. После того как программа выходит из редактора разработчика, она сначала транспилируется Babel, затем упаковывается Webpack (и, возможно, пятью-шестью другими процессами построения), после чего в совершенно новой форме передается ядру JS.",
        "",
        "2. Ядро JS разбирает код в форму AST(Abstract Syntaxis Three).",
        "",
        "3. Ядро преобразует AST в своего рода байт-код — двоичное промежуточное представление (IR, Intermediate Representation), которое дополнительно совершенствуется/преобразуется оптимизирующим компилятором JIT(Just In Time - Обработка/оптимизация)",
        "",
        "4. Наконец, виртуальная машина JS выполняет программу.",
      ]
    },
    {
      q: "Полифил", i: false, 
      a: [
        "Часть кода, который используется для представления некоторых функций, которые один браузер может поддерживать, а другой - нет.",
        "Для этого генерируеться код, который выполняет ту же работу, только другими, подручными средствами."
      ]
    },
    {
      q: "Транспиляция", i: false,
      a: [
        "Как правило, проблемы прямой совместимости, связанные с синтаксисом, решаются использованием транспилятора (самым распространенным из которых является <a target='_blank' href='https://babeljs.io'>Babel</a>) для преобразования синтаксиса новой версии JS к эквивалентному старому синтаксису."
    ]
  },
  ]  
};